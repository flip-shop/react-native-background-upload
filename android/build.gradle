buildscript {
    ext {
        kotlinVersion = '1.6.20'
        buildToolsVersion = '31.0.0'
        compileSdkVersion = 33
        targetSdkVersion = 31
        minSdkVersion = 18
    }
    ext.detoxKotlinVersion = ext.kotlinVersion

    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.0"
    }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["RNUPloader" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["RNUPloader" + name]).toInteger()
}

android {
    compileSdkVersion findProperty('compileSdkVersion') ?: 28
    buildToolsVersion findProperty('buildToolsVersion') ?: "28.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion findProperty('targetSdkVersion') ?: 28
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    }
    lintOptions {
        abortOnError false
    }
    sourceSets {
        main {
            if (isNewArchitectureEnabled()) {
                java.srcDirs += [
                "src/newarch",
                // This is needed to build Kotlin project with NewArch enabled
                "${project.buildDir}/generated/source/codegen/java"
             ]
            } else {
            java.srcDirs += ["src/oldarch"]
            }
        }
    }
}

repositories {
    mavenCentral()
    google()
    jcenter()
}

def _ext = ext

def _kotlinVersion = _ext.has('detoxKotlinVersion') ? _ext.detoxKotlinVersion : '1.3.10'
def _kotlinStdlib = _ext.has('detoxKotlinStdlib') ? _ext.detoxKotlinStdlib : 'kotlin-stdlib-jdk8'


dependencies {

    def work_version = "2.8.0"
    def androidXTestVersion = "1.5.0"
    def mockitoVersion = "5.1.1"
    def mockitoKotlinVersion = "4.1.0"
    def mockkVersion = "1.13.4"
    def koin_version = "3.3.3"
    def retrofit_version = "2.9.0"

    implementation "androidx.core:core-ktx:1.9.0"
    implementation 'com.facebook.react:react-native:+'
    implementation "org.jetbrains.kotlin:$_kotlinStdlib:$_kotlinVersion"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"
    // optional - Test helpers
    androidTestImplementation "androidx.work:work-testing:$work_version"
    implementation("androidx.concurrent:concurrent-futures-ktx:1.1.0")

    implementation("com.squareup.okhttp3:okhttp:4.10.0")
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.2"
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation "io.insert-koin:koin-core:$koin_version"
    implementation "io.insert-koin:koin-android:$koin_version"

    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'

    // Required -- JUnit 4 framework
    testImplementation 'junit:junit:4.13.2'
    // Optional -- Robolectric environment
    testImplementation "androidx.test:core:$androidXTestVersion"
    testImplementation "androidx.test:core-ktx:$androidXTestVersion"
    // Optional -- Mockito framework
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    // Optional -- mockito-kotlin
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    // Optional -- Mockk framework
    testImplementation "io.mockk:mockk:$mockkVersion"
    // Koin Test features
    testImplementation "io.insert-koin:koin-test:$koin_version"
    // Koin for JUnit 4
    testImplementation "io.insert-koin:koin-test-junit4:$koin_version"
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "RNUPloader"
    codegenJavaPackageName = "com.vydia"
  }
}